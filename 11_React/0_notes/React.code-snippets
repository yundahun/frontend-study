{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Component": {
		"prefix": "rfc",
		"body": [
			"function ${TM_FILENAME_BASE}() {",
			"  return (",
			"    <>",
			"    </>",
			"  );",
			"};",
			"",
			"export default ${TM_FILENAME_BASE};"
		]
	},
	"StyleComponent": {
		"prefix": "srfc",
		"body": [
			"import styled from 'styled-components';",
			"",
			"const Component = styled.div``;",
			"",
			"function ${TM_FILENAME_BASE}(props) {",
			"  return (",
			"    <Component>",
			"    </Component>",
			"  )",
			"};",
			"",
			"export default ${TM_FILENAME_BASE};"
		]
	},
	"useState": {
		"prefix": "useState",
		"body": [
			"const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:});"
		]
	},
	"useEffect": {
		"prefix": "useEffect",
		"body": [
			"useEffect(() => {",
			"\t${1:}",
			"\treturn () => {",
			"\t\t${2:}",
			"\t};",
			"}, [${3:}]);"
		]
	},
	// "useContext": {
	// 	"prefix": "useContext",
	// 	"body": ["const ${1:context} = useContext(${2:contextValue})"]
	// },
	// "useReducer": {
	// 	"prefix": "useReducer",
	// 	"body": [
	// 		"const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
	// 	]
	// },
	"useCallback": {
		"prefix": "useCallback",
		"body": [
			"useCallback(() => {",
			"\t${2:}",
			"}, [${3:}]);"
		]
	},
	// "useMemo": {
	// 	"prefix": "useMemo",
	// 	"body": ["useMemo(() => {", "\t${1:}", "}, [${2:}]);"]
	// },
	// "useRef": {
	// 	"prefix": "useRef",
	// 	"body": ["useRef(${2:null});"]
	// },
	// "useImperativeHandle": {
	// 	"prefix": "useImperativeHandle",
	// 	"body": [
	// 		"useImperativeHandle(${1:ref}, () => ({",
	// 		"\t${2:handler}",
	// 		"}));"
	// 	]
	// },
	// "useDebugValue": {
	// 	"prefix": "useDebugValue",
	// 	"body": ["useDebugValue(${1:value});"]
	// },
	// "useLayoutEffect": {
	// 	"prefix": "useLayoutEffect",
	// 	"body": [
	// 		"useLayoutEffect(() => {",
	// 		"\t${1:}",
	// 		"\treturn () => {",
	// 		"\t\t${2:}",
	// 		"\t}",
	// 		"}, [${3:}]);"
	// 	]
	// },
	// "useSelector": {
	// 	"prefix": "useSelector",
	// 	"body": ["const ${1:state} = useSelector(state => state.${1:state});"]
	// },
	// "useDispatch": {
	// 	"prefix": "useDispatch",
	// 	"body": ["const dispatch = useDispatch();"]
	// },
	// "useNavigate": {
	// 	"prefix": "useNavigate",
	// 	"body": [
	// 		"const navigate = useNavigate();"
	// 	]
	// },
	// "useLocation": {
	// 	"prefix": "useLocation",
	// 	"body": [
	// 		"const location = useLocation();"
	// 	]
	// },
	// "useSearchParams": {
	// 	"prefix": "useSearchParams",
	// 	"body": [
	// 		"const [searchParams] = useSearchParams();"
	// 	]
	// },
	// "map": {
	// 	"prefix": "map",
	// 	"body": [
	// 		"map((${1:currentValue}, index) => {",
	// 		"\t${2:}",
	// 		"\treturn ${3:};",
	// 		"});"
	// 	]
	// },
	// "reduce": {
	// 	"prefix": "reduce",
	// 	"body": [
	// 		"reduce((${1:sum}, ${2:currentValue}${3:, index}) => {",
	// 		"\t${4:}",
	// 		"\treturn ${5:};",
	// 		"}, ${6:});"
	// 	]
	// },
	// "filter": {
	// 	"prefix": "filter",
	// 	"body": [
	// 		"filter(${1:params} => ${2:});",
	// 	]
	// },
	// "text overflow ellipsis": {
	// 	"prefix": "ellipsis",
	// 	"body": [
	// 		"overflow: hidden;",
	// 		"text-overflow: ellipsis;",
	// 		"white-space: nowrap;"
	// 	]
	// },
	// "flex center description": {
	// 	"prefix": "fc",
	// 	"body": [
	// 		"display: flex;",
	// 		"flex-direction: column;",
	// 		"justify-content: center;",
	// 		"align-items: center;"
	// 	]
	// },
	// "scss self": {
	// 	"prefix": "self",
	// 	"body": [
	// 		"$$self: #{&};"
	// 	]
	// },
	// "global self": {
	// 	"prefix": "gs",
	// 	"body": [
	// 		":global {",
	// 		"  #{$$self}__${1:} {",
	// 		"    ${2:}",
	// 		"  }",
	// 		"}",
	// 	]
	// },
}